[
  {
    "objectID": "news.html",
    "href": "news.html",
    "title": "News",
    "section": "",
    "text": "Bump minimum Quarto version to 1.3.0.\nFixes for compatibility with newer Quarto 1.3 pre-releases\n\nQuarto‚Äôs switch from Pandoc 2 to Pandoc 3 caused some issues with the way Sverto identifies Svelte import statements. This should no longer be a problem.\n\nWe now take advantage of the improved .quartoignore functionality in Quarto 1.3 to:\n\navoid copying the docs folder in with the project template; and\ninclude the .gitignore with the template"
  },
  {
    "objectID": "news.html#section",
    "href": "news.html#section",
    "title": "News",
    "section": "0.0.1",
    "text": "0.0.1\n\nInitial release"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sverto",
    "section": "",
    "text": "Your Svelte components can seamlessly react to your ObservableJS code, making it quick and easy to build bespoke visuals that animate in response to user inputs or other changing data in your document."
  },
  {
    "objectID": "index.html#why-sverto",
    "href": "index.html#why-sverto",
    "title": "Sverto",
    "section": "üí≠ Why Sverto?",
    "text": "üí≠ Why Sverto?\nQuarto helps users build beautiful documents regardless of their language of choice, and it encourages data analysts and scientists to explore web visualisation by making JavaScript accessible and easy to use. It makes interactive visualisations intuitive to write, but animated visuals are still a challenge that require either dipping into a high-level JavaScript library or learning a lower-level one like d3.\nSvelte is a framework for building web visualisations and apps in JavaScript. Svelte goes out of its way to make writing self-contained components, like charts, comfortable and intuitive. It has a great playground environment for developing and testing components, but like many web frameworks, the experience is much more complex when you start developing locally.\nSverto aims to make it as easy to use animated Svelte charts in Quarto documents as it is to work on them in the Svelte REPL: just write a .svelte file, add it to a Quarto document, and Sverto should take care of the rest."
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "Sverto",
    "section": "üìã Prerequisites",
    "text": "üìã Prerequisites\nYou‚Äôll need to install two things to run Sverto:\n\nQuarto\nNode and the Node Package Manager (npm)"
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "Sverto",
    "section": "‚öôÔ∏è Installation",
    "text": "‚öôÔ∏è Installation\nInstall the project extension using:\nquarto use template 360-info/sverto\nThen run:\nnpm install\nThis will add the extension itself (which includes some project scripts) to the _extension folder, as well as a few other files.\n\n\n\n\n\n\nNote\n\n\n\nSverto depends on running project pre-render scripts, so you can‚Äôt currently use it with single documents."
  },
  {
    "objectID": "index.html#use",
    "href": "index.html#use",
    "title": "Sverto",
    "section": "üéâ Use",
    "text": "üéâ Use\nHere‚Äôs the short way to add Svelte component you‚Äôve written to a Quarto doc:\n\nAdd a magic placeholder block to your document with a Quarto include to the path to your Quarto doc, prefixed with /.sverto/. For example:\n:::{}\n{{< include /.sverto/example.qmd >}}\n:::\nImport your Svelte component in OJS with Component = import_svelte(\"Component.svelte\")\nAdd a target block for your visual using ::: and give it an #id\nInstantiate the Svelte component with myVisual = Component.default() using some default props and your target block\nUpdate the instantiated component with myVisual.propName\nRender your Quarto project as usual with quarto render or quarto preview.\n\nTo see this all in practice, check out example.qmd.\n\n\n\n\n\n\nNote\n\n\n\nThe quarto preview command won‚Äôt ‚Äúlive reload‚Äù when you modify your Svelte component‚Äîbut if you modify and save the Quarto doc that imports it, that will trigger a re-render. You may need to hard reload the page in your browser to see the updated Svelte component.\nIf you want to quickly iterate on the Svelte component and you aren‚Äôt too concerned about the rest of your Quarto doc, you might find the Svelte Preview extension for VSCode handy.\n\n\nAs well as the project format, Sverto ships with document formats (the default is sverto-html). If you need to change document options that would normally go under format: html, use format: sverto-html or format-sverto-revealjs instead."
  },
  {
    "objectID": "index.html#use-other-libraries-in-your-svelte-component",
    "href": "index.html#use-other-libraries-in-your-svelte-component",
    "title": "Sverto",
    "section": "üõç Use other libraries in your Svelte component",
    "text": "üõç Use other libraries in your Svelte component\nIf you want to refer to other JavaScript libraries in your Svelte component (like d3, for example), add them to the project using npm install package1 [package2 ...]. For example:\nnpm install d3-scale"
  },
  {
    "objectID": "index.html#use-pre-compiled-svelte-components",
    "href": "index.html#use-pre-compiled-svelte-components",
    "title": "Sverto",
    "section": "üî® Use pre-compiled Svelte components",
    "text": "üî® Use pre-compiled Svelte components\nIf you‚Äôd prefer to compile your own Svelte components instead of letting this extension do it, you can skip steps 1 and 2 and simply refer to the compiled bundle with, for example, Component = import(\"Component.js\") in an OJS block.\n\n\n\n\n\n\nNote\n\n\n\nYou must compile the Svelte component to an ES6 bundle, and you must enable accessors when compiling if you want to be able to update them from OJS. Refer to _extensions/sverto/rollup.config.js for guidance on configuring Rollup to do this."
  },
  {
    "objectID": "index.html#issues",
    "href": "index.html#issues",
    "title": "Sverto",
    "section": "‚ùì Issues",
    "text": "‚ùì Issues\nIf you have any problems with the extension, please feel free to create an issue!\nSpecial thanks to Carlos Scheidegger from Posit for his time and advice!"
  },
  {
    "objectID": "examples/barchart/index.html",
    "href": "examples/barchart/index.html",
    "title": "Examples: basic barchart",
    "section": "",
    "text": "Let‚Äôs start with a simple barchart.\nThis isn‚Äôt going to be one of those barcharts you‚Äôve seen on TV, what with tick marks and hover effects and such. This one‚Äôs just some bars, some labels and a baseline. It will, however, come with some useful features to help us reuse it."
  },
  {
    "objectID": "examples/barchart/index.html#challenges",
    "href": "examples/barchart/index.html#challenges",
    "title": "Examples: basic barchart",
    "section": "Challenges",
    "text": "Challenges\nThis Svelte component‚Äôs pretty basic, though. What else is it missing?\n\nThe height and width are configurable, and the bars resize in response to them, but their CSS transitions are slow to catch up. Ideally we‚Äôd have the bars apply the transition when they resize because of a change in data but not in response to a change in chart height or width.\nWe have no axes other than the baseline. That‚Äôs fine for a lot of uses, but we might want to add those elements for other uses.\n\nWe could add those elements manually, but the d3-axis package has some helpers for creating axes quickly!\n\nThe bars are all the same colour. We could write a function that converts each bar‚Äôs data value to a colour, and use it for the <rect> fill attribute, but the d3-scale-chromatic also has some helpers to do this quickly!"
  }
]